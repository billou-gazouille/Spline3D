using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SplineFollower : MonoBehaviour
{
    [SerializeField] Spline3DMonoBehaviour splineMB;
    [SerializeField] float speed = 0.2f;
    public event Action onReachedEnd;
    public event Action<int> onReachedControlPoint;
    float prev_mod = 0.99f;
    Vector3 prev_pos;
    float t;
    [SerializeField] float ds = 0.5f;    // spacial distance

    public Spline3D spline { get; private set; }

    void Start()
    {
        spline = splineMB.spline;
        t = 1.01f;
    }

    float DoMagicUsingDerivatives(float t)
    {
        int p0, p1, p2, p3;
        p1 = (int)t;
        p2 = p1 + 1;
        p3 = p1 + 2;
        p0 = p1 - 1;

        t = t - (int)t;

        /*
        float q1 = -ttt + 2f * tt - t;
        float q2 = 3f * ttt - 5f * tt + 2f;
        float q3 = -3f * ttt + 4f * tt + t;
        float q4 = ttt - tt;
        */

        float tt = t * t;

        // differentiate with respect to t:
        float dq1dt = -3f * tt + 4f * t - 1f;
        float dq2dt = 9f * tt - 10f * t;
        float dq3dt = -9f * tt + 8f * t + 1f;
        float dq4dt = 3 * tt - 2f * t;

        var controlPoints = spline.controlPoints;

        /*
        float x = 0.5f * (controlPoints[p0].x * q1 + controlPoints[p1].x * q2 + controlPoints[p2].x * q3 + controlPoints[p3].x * q4);
        float y = 0.5f * (controlPoints[p0].y * q1 + controlPoints[p1].y * q2 + controlPoints[p2].y * q3 + controlPoints[p3].y * q4);
        float z = 0.5f * (controlPoints[p0].z * q1 + controlPoints[p1].z * q2 + controlPoints[p2].z * q3 + controlPoints[p3].z * q4);
        */

        float dxdt = 0.5f * (controlPoints[p0].x * dq1dt + controlPoints[p1].x * dq2dt + controlPoints[p2].x * dq3dt + controlPoints[p3].x * dq4dt);
        float dydt = 0.5f * (controlPoints[p0].y * dq1dt + controlPoints[p1].y * dq2dt + controlPoints[p2].y * dq3dt + controlPoints[p3].y * dq4dt);
        float dzdt = 0.5f * (controlPoints[p0].z * dq1dt + controlPoints[p1].z * dq2dt + controlPoints[p2].z * dq3dt + controlPoints[p3].z * dq4dt);

        return Mathf.Sqrt(dxdt * dxdt + dydt * dydt + dzdt * dzdt);
    }


    void Update()
    {
        // make the follower go at constant speed:
        var delta_t = ds / DoMagicUsingDerivatives(t);
        t += delta_t;
        t = t % (spline.controlPoints.Count - 2);
        //t = Mathf.Clamp(t, 1.01f, spline.controlPoints.Count - 2);
        t = Mathf.Clamp(t, 1.01f, spline.controlPoints.Count - 2.01f);
        //Debug.Log(t);
        transform.position = spline.GetPointOnSpline(t);
        float currentMod = t % 1;
        if (currentMod < prev_mod)   // if new integerIndex
        {
            int controlPointIndex = (int)t;
            onReachedControlPoint?.Invoke(controlPointIndex);
            //Transform controlPointTransform = splineMB.transform.GetChild(controlPointIndex);
            //onReachedControlPoint?.Invoke(controlPointTransform);
        }
        prev_mod = currentMod;
    }


    /*
    void Update()
    {
        var val = (Time.time * speed) % (spline.controlPoints.Count - 2);
        var t = Mathf.Clamp(val, 1f, spline.controlPoints.Count - 2);
        //Debug.Log(t);
        transform.position = spline.GetPointOnSpline(t);
        float currentMod = t % 1;
        if (currentMod < prev_mod)   // if new integerIndex
        {
            int controlPointIndex = (int)t;
            onReachedControlPoint?.Invoke(controlPointIndex);
            //Transform controlPointTransform = splineMB.transform.GetChild(controlPointIndex);
            //onReachedControlPoint?.Invoke(controlPointTransform);
        }
        prev_mod = currentMod;
    }
    */
}
